import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

//UB ID - aniredn@buffalo.edu, smunugal@buffalo.edu

public class TimeProblem {

	public static class Mapper1 extends Mapper<Object, Text, Text, IntWritable>{
		
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
				String line = value.toString();
				String[] input = line.split(",");
				
				if(isNumeric(input[7].trim()) && isNumeric(input[8].trim())){
				StringBuilder sb = new StringBuilder();
				String[] hall = input[2].split(" ");
				// Remove Arr and Unknowns
				if(!(hall[0].trim().equalsIgnoreCase("Arr") || hall[0].trim().equalsIgnoreCase("Unknown") || 
					input[4].trim().equalsIgnoreCase("Unknown") ||  input[4].substring	(0,1).equalsIgnoreCase("B") )){
					// Remove zero Student capacity and seats
					if((Integer.parseInt(input[7].trim()) > 0) && (Integer.parseInt(input[8].trim()) > 0)){
						String[] sem_year = input[1].split(" ");
						sb.append(sem_year[0]);
						sb.append("_");
						sb.append(sem_year[1]);
						sb.append("_");
						String[] time = input[4].split(" ");
						sb.append(time[0].trim());
						sb.append(time[1].trim());
						sb.append(time[2].trim());
						
						Text map1Out = new Text(sb.toString());
						context.write(map1Out, new IntWritable(1));
					}
				}
			}
		}
	}

	public static class Reducer1 extends Reducer<Text,IntWritable,Text,IntWritable> {
		
			public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
				int sum = 0;
				for (IntWritable val : values)
					sum += val.get();
				context.write(key, new IntWritable(sum));
			}
	}

	public static class Mapper2 extends Mapper<Object, Text, Text, IntWritable>{

		Text word = new Text();

		public void map(Object key, Text value, Context context) throws IOException, InterruptedException{
			String[] fields=value.toString().split("\\t"); 
			StringBuilder sb = new StringBuilder();
			String[] keyfields = fields[0].split("_");
			sb.append(keyfields[1]);
			sb.append("_");
			sb.append(keyfields[2]);

			Text map2Out = new Text(sb.toString());

			context.write(map2Out,new IntWritable(Integer.parseInt(fields[1])));

		}
	}


	public static class Reducer2 extends Reducer<Text,IntWritable,Text,IntWritable>{

		public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
    		int sum=0;
    		for(IntWritable val:values)
    			{
    				sum+=val.get();
    			}
    		context.write(key,new IntWritable(sum));
    	}
	}





	public static void main(String[] args) throws Exception {
		
		Configuration conf1 = new Configuration();
		Job job1 = Job.getInstance(conf1, "job1");
        
		job1.setJarByClass(TimeProblem.class);
		job1.setMapperClass(Mapper1.class);
		job1.setCombinerClass(Reducer1.class);
		job1.setReducerClass(Reducer1.class);
		
        job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(IntWritable.class);
		
        FileInputFormat.addInputPath(job1, new Path(args[0]));
		FileOutputFormat.setOutputPath(job1, new Path(args[1]));

		job1.waitForCompletion(true);


		Configuration conf2 = new Configuration();
		Job job2 = Job.getInstance(conf2, "job2");
        
		job2.setJarByClass(TimeProblem.class);
		job2.setMapperClass(Mapper2.class);
		job2.setCombinerClass(Reducer2.class);
		job2.setReducerClass(Reducer2.class);
		
        job2.setOutputKeyClass(Text.class);
		job2.setOutputValueClass(IntWritable.class);
		
        FileInputFormat.addInputPath(job, new Path(args[1]));
		FileOutputFormat.setOutputPath(job, new Path(args[2]));

		System.exit(job2.waitForCompletion(true) ? 0 : 1);
	}


	public static boolean isNumeric(String str){  
	  try  
	  {  
	    int d = Integer.parseInt(str);  
	  }catch(NumberFormatException nfe)  
	  {  
	    return false;  
	  }  
	  return true;  
	}

}
